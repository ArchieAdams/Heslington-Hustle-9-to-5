@startuml

class HustleGame{
    - Screen startScreen
    - Screen gameScreen
    - Screen endScreen
    - GameState gameState
    + void create()
    + void render()
    + void dispose()
    }

    package gamescreen{
    class GameScreen{
    HustleGame game

    }



    class GameScreenInput{
    HustleGame game
    + boolean keyDown(int keycode)
    + boolean moveUp()
    + boolean moveDown()
    + boolean moveLeft()
    + boolean moveRight()
    + boolean performGameActivity()
    - void nextScreen()
    }

    class GameScreenUi{
        HustleGame game
        - float pixelsPerSquare = 120
        - List<String> days
        - void showBackground()
        - void showMap()
        - void showPlayer()
        - void showHud()
        }
    }
    package startscreen{
    class StartScreen{
        }
    class StartScreenInput{
        HustleGame game
        + boolean keyDown(int keycode)
        - void nextScreen()
        }

    class StartScreenUi{
        + void showStartScreen()
        }
    }
    package endscreen{
    class EndScreen{
        }
    class EndScreenInput{
            HustleGame game
            + boolean keyDown(int keycode)
            - void finish()
            }
    class EndScreenUi{
            }
    }

    abstract class BaseScreen{
    - ScreenUI ui
    }
    abstract class ScreenUI{
    + void update()
    + void resize(int width, int height)
    }

    ScreenUI <|-- StartScreenUi
    ScreenUI <|-- GameScreenUi
    ScreenUI <|-- EndScreenUi
    BaseScreen <|-- StartScreen
    BaseScreen <|-- GameScreen
    BaseScreen <|-- EndScreen
    HustleGame "1..1"--"1..1" GameScreen
    HustleGame "1..1"--"1..1" StartScreen
    HustleGame "1..1"--"1..1" EndScreen
    GameScreenUi *-- GameScreen
    GameScreenInput *-- GameScreen
    StartScreenUi *-- StartScreen
    StartScreenInput *-- StartScreen
    EndScreenUi *-- EndScreen
    EndScreenInput *-- EndScreen

package gamestate{
    class MapGraph{
    - HashMap<TilePosition, List<TilePosition>> fullMap;
    - HashMap<TilePosition, Node> nodeMap;
    void addTile(int x, int y, Node nod)
    void addEdge(int x1, int y1, int x2, int y2)
    + void createMainMap()
    }


    class Player{
    TilePosition playerPosition
    }

    class Node{
    - arrayList<Activity> listOfActivities
    }

    class TilePosition{
    int row
    int column
    }



    class GameState{

    - int energy
    - int maxEnergy
    - int time
    - int timeInDay
    - int day
    - ArrayList<Activity> activityList = new ArrayList<>
    - MapGraph map
    - TilePosition playerPosition
    - Player character
    - boolean gameOver = false
    + boolean moveUp()
    + boolean moveDown()
    + boolean moveLeft()
    + boolean moveRight()
    + boolean performActivity(Activity act)
    - boolean canMove(Direction direction)
    + Map<String, Integer> scoreCalculation()
    }
package Activitiy{
    abstract Activity{
    - int timeConsumption
    - int energyConsumption
    - String name
    }
    Class Study
    Class Eat
    Class Recreation
    Class Sleep
}
    Activity <|-- Study
    Activity <|-- Eat
    Activity <|-- Recreation
    Activity <|-- Sleep

    Player "1..1" -- "1..1"GameState
    Player "1..1" -- "1..1" TilePosition
    Node *--"0..M" Activity
    MapGraph "1..M"-- GameState


@enduml